

1)Descripcion del problema:
Se tiene un grupo de exploradoras tales que algunas de ellas son amigas entre sÃ­(la relacion es simetrica)
El problema consiste en obtener a partir de una lista de exploradoras, con forma de ronda y un peso entre cada par de elementos determinado por la distancia entre estos, 
obtener una permutacion de ella tal que se haya minimizado la suma de los pesos de todos los elementos. Se debe devolver dicha lista en el orden que cumpla con 
la condicion y un numero correspondiente a el peso maximo entre dos elementos de la ronda obtenida. En caso de existir mas de una solucion, se debe devolver la de menor
orden lexicografico.
Notar que si dos elementos no estan relacionados, no son amigas, entonces el peso es nulo

Ejemplos:
A)Se tiene la siguiente lista, vista como una ronda:
l = [a, b, c, d] y la siguiente relacion de amistad a = {(a,c)(c,d)}
La solucion debe ser: l' = [a, b, d, c] ya que d(a,c)  y d(d,c) son uno, que es lo minimo que se puede conseguir. Es importante ver que la distancia
,al ser una ronda, es siempre el minimo {posicion(y) - posicion(x),longitudRonda - posicion(y) +posicion(x)} con x e y  dos elementos cualesquiera .
Luego, esta solucion es la mas chica ordenada de forma lexicografica.
Notar que, entonces, la suma de las distancias totales, que fue minimizada, es : d(a,c)+d(d,c)+0 = 2.
Finalmente, el output debe ser: 1 [a, b, d, c] pues 1 es la distancia maxima entre cualquier par de elementos.

B) Se tiene la siguiente lista, vista como una ronda:
l = [a, b, c] y la siguiente relacion de amistad a = {(a,c)}
La solucion debe ser: l' = [a,b,c] ya que d(a,c) = 1. A
Finalmente, el output debe ser: 1 [a, b, c] pues 1 es la distancia maxima entre cualquier par de elementos y la lista es la menor de todas las que cumplen.

C) Se tiene la siguiente lista, vista como una ronda:
l = [a,b,c,d,e] y la siguiente relacion de amistad a = {(a,b)(a,c)(a,d)(a,e)(c,e)}.
La solucuion debe ser: l' = 2 [a,b,c,e,d]. Notemos que si bien la lista [a,b,d,c,e] cumple con ser una minimizacion, la misma es mayor lexicograficamente que l'. Podemos ver facilmente que como a esta relacionada con todas, no importa el orden en el que se pongan, la suma de las distancias no cambia. Sin embargo, al pedir que (c,e) tambien sean amigas, obliga a tener que elegir un orden apropiado para estas dos ultimas letras. Basicamente, deben ir "pegadas". Luego, el mejor lugar para ponerlas es aquella que acerque la "e" hacia la "c", para obtener la menor de las posibles soluciones.


2)Descripcion del algoritmo 

Estructura:
Para resolver el problema, se decidió dividirlo en un conjunto de modulos,clases, para poder abstraer mejor los detalles que no fuesen inherentes al problema principal en si, el de la minimizacion de las distancias.
En este sentido, se implementaron tres clases: Amistad,Ronda y Fogon. Este es el orden de abstraccion, es decir la ultima mencionada utiliza los servicios de las de abajo, y asi sucesivamente. A continuacion se muestra la estructura y jerarquia de las mismas. 
	(Hacer esquema con los miembros de cada clase)
Ideas centrales:

Basicamente, implementaremos un algoritmo que haga backtracking sobre las posibles formas de ordenar una ronda de exploradoras y nos quedaremos con aquella que minimice la suma de las distancias. Esta misma sera la que quedara referenciada por el campo rondaOptima de la clase.
Para esto, cuando el algoritmo de backtracking haye una primera permutacion de la ronda, esta sera nuestra candidata a optima. Luego,el algoritmo ira explorando nuevas soluciones posibles. Cuando llegue a una hoja del arbol de posibilidades, es decir, cuando quede definida una ronda que es permutacion de la original se preguntara si la nueva suma de distancias es mejor. Si es asi, habremos obtenido una nueva rondaOptima. De esta forma continuaremos hasta haber inspeccionado todas las posibles soluciones que sean relevantes(que podrian no ser todas, por las posibles podas).

Mas en detalle, diremos que la clase fogon cuenta con dos funciones: Solve y SentarExploradoras, que hace el trabajo mencionado arriba.
La primera recibirá una lista(ArrayList) de exploradoras(Character) y un conjunto de amistades(HashSet<Amistad>). A partir de esto:

Ordenar la lista alfabeticamente

Verificara si hay amistades definidas en el conjunto. 

Si esto no fuese cierto, la lista de exploradoras es la solucion optima. Generamos una ronda igual a dicha lista y la instanciamos en rondaOptima.

Si fuese cierto, y la lista de exploradoras es no vacia, definimos una rondaAuxiliar a la cual le agregamos el primer elemento de la lista de exploradoras. Tambien se remueve dicho elemento de la lista. Finalmente, se llama a la funcion SentarExploradoras(lista exploradoras, rondaAuxiliar,Tam(exploradoras)) que instanciara el miembro rondaOptima con la solucion
Devolvera una referencia a el miembro rondaOptima
  
De esta funcion podemos remarcar dos aspectos:
La funcion de SentarExploradoras usa, como precondicion, que la lista este ordenada. La razon se vera en detalle luego, pero ,por ahora, diremos que el algoritmo de backtracking mira, en cada nivel de la recursion, las posibles elecciones de letras(exploradoras) en orden.
Ademas, como la solucion optima debe estar ordenada lexicograficamente, en principio, una buena decision podria ser fijar como primer elemento de la ronda,vista como lista, a la primer exploradora(donde la primera es la menor alfabeticamente, pues ya esta ordenada). Esto evitara, en el backtracking, tener que mirar el resto de las posibles elecciones para la primer posicion y comenzar desde la siguiente.

Veamos con detenimiento el algoritmo de SentarExploradoras
(Esto va en pseudocodigo de latex)

sentarExploradoras(Lista exploradoras, Ronda rondaAux, int tam)		
Verificamos si rondaAux esta completa,i.e si ya se formo una rama	
 IF{ Tamaño(rondaAux) =tam + 1 )}			

//El caso "base":
//Si la solucion es mejor que la optima actual o es la primera ronda que se arma, pasa a ser la nueva optima:

 if( Peso(rondaAux) < Peso(rondaOptima)  OR Vacia?(rondaOptima))
 	rondaOptima = rondaAux
 	retornar
				
		
//Si no esta completa, es decir todavia quedan decisiones por tomar, //estamos en un nuevo paso de la recursion y tenemos que explorar todas las elecciones disponibles en exploradoras, para este nivel del arbol.

for(i = 0, i < Tamaño(exploradoras),i++)
	//Elegimos el primero de la lista, que debe ser el elemento mas 	chico disponible en el nivel
	eleccion = exploradoras[i]
	Agregar(eleccion,rondaAux)
				
	//PODA1: Se aplica ya sobre el final. Si vamos a comenzar a 	mirar las soluciones del tipo [a,ultima,...()] entonces, 	podamos esa rama(ver exp mas adelante)
	if(Tamaño(rondaAux) = 2 ^ i es el ultimo indice)
		salir	del bucle
			
	//PODA2: Si la distancia de la ronda actual ya es peor que la 	optima, podar rama
	if(Peso(rondaAux) >= Peso(rondaOptima)AND !Vacia?(rondaOptima))
		Remover(rondaAux,eleccion)				
	else
	
	//Si no se pudo podar, hay que explorar las posibles elecciones 	//del nivel.
	Remover(exploradoras,eleccion)

	//Sacamos al elemento eleccion de la lista de 		//exploradoras, para reducir el espacio de elecciones del 	//proximo 	nivel	y garantizar que no se pueda volver a agarrar 	//mas abajo en la recursion	

	//Hacemos la llamada recursiva para continuar expandiendo la 	//rondaAux y hallar una nueva solucion
	sentarExploradoras(exploradoras, rondaAux,tam);
	
	//Al regresar, habremos explorado el subarbol generado a partir 	//de nuestra ultima decision
	
	ultima = RemoverUltima(rondaAux)
	AgregarAdelante(exploradoras,eleccion)

	//Sacamos la ultima eleccion de la rondaAux y mantenemos el 	//invariante ,colocando el elemento al comienzo de la misma //para mantenerla ordenada y para que quede disponible para las 	//subsiguientes elecciones que se haran en el proximo 	ciclo(otra forma de verlo es pensar que tiene que estar lista 	para las exploraciones que van a hacer sus hermanos, i.e las 	demas posibles decisiones del mismo	nivel	 
end for
	

retornar

Es importante remarcar , ahora, algunos detalles sobre las clases de Ronda y Amistad.
Sobre esta ultima, solamente basta aclarar que es una tupla que implementa un par no ordenado. Se hizo,entonces, un "override" del metodo equals para definir la igualdad como (a,b) = (b,a).

En cuanto a la ronda, la misma es una clase que extiende a ArrayList<Character>. Solamente se le agregaron dos metodos relevantes:
distancia(int a, int b) y sumaDistancias(HashSet<Amistad> amigas)

La primera, simplemente calcula las distancias dados dos indices en la ronda. Para eso, tiene en cuenta que si la diferencia entre b y a es mayor que la mitad, la distancia debe ser: tamaño - b + a. Si no, es simplemente la resta b -a.

En cuanto a sumaDistancias,basicamente calcula las distancias todos contra todos.

Define un acumulador inicializado en cero
Itera la lista(ronda)
	Por cada elemento que recorre, itera el resto de la lista(i.e hay dos bucles anidados).
	Calcula la distancia entre el par de elementos y luego crea una instancia de amistad
	Se fija si dicha amistad esta contenida en el conjunto de amigas, que recibe por parametro.
		Si es asi, acumula la distancia
		Si no, no hace nada
	Continua el curso de los bucles



3)Analisis de correctitud

Vamos a asumir que las funciones de las demas clases son correctas. Razonaremos , luego, por induccion en la cantidad de exploradoras (e) y dejaremos fijo la cantidad de amistades(a != 0).

Si n = 1, entonces la funcion solve agregara el primer, y unico, elemento de la lista a la rondaAuxiliar. Luego, SentarExploradoras(vacia,rondaAux,0) caera en el primer if(caso "base" del backtrack) pues Tamaño(vacia) = tam(=0)+1
Entonces, entrara al siguiente if, ya que la rondaOptima se encuentra vacía. De esta forma se instancia rondaOptima con rondaAux y se retornara a la funcion solve, la cual devolvera rondaOptima. Es facil ver que, entonces, la solucion es correcta.

Supongamos que n> 1.  Es claro que no entrara en el primer if, pues rondaAux tiene un solo elemento. Luego, supongamos que estamos en la iesima iteracion del ciclo que explora las posibles elecciones. Siguiendo el algoritmo: se agrega el iesimo elemento de la lista de exploradoras a la rondaAux, que tiene n-1 elementos(pues inicialmente, el backtrack se llama  sin el primer elemento de la lista). El invariante del ciclo garantiza que la lista este en orden y que , dentro del mismo nivel del backtrack, el tamaño va a ser n-1. Luego, asumamos que no hay ninguna poda para hacer. Entonces, se remueve la iesima exploradora de la lista(ahora con n-2 elementos). Luego, por hipotesis inductiva, SentarExploradoras(exploradoras,rondaAux,tam) es correcta y por lo tanto explora todo el arbol de decision posible con la eleccion que acabamos de hacer y se tiene en rondaOptima la mejor ronda hasta el momento. Luego, hay que reestablecer el invariante. Para eso, quitamos de la rondaAux a la ultima eleccion, y la volvemos a agregar en la lista adelante de todo, para mantener el orden. Luego, la lista vuelve a tener n-1 elementos. Cuando lleguemos a la iteracion final(n-1) habremos inspeccionado correctamente todo el arbol de decision para cada eleccion de la lista de n-1 elementos. Luego, como miramos todas las posibles combinaciones, habremos encontrado la rondaOptima.

¿Que hubiese pasado en caso de haberse efectuado una poda?
Si en alguna iteracion hubiesemos caido en la primer poda, se habrian perdido posibles soluciones. Sin embargo, se puede ver que aquellas que se descartan ,en este caso, son rondas que se obtienen de mirar "al reves" las que ya se vieron. Por lo tanto no aportan un nuevo espacio de soluciones.
Si en alguna iteracion hubiesemos caido en la segunda poda, significaria que aquella ronda no era mejor que la optima. Luego, como agregando nuevas elecciones no podria mejorar, es seguro podar.(?)

4)Analisis de complejidad:

Como hay mas de una clase, podemos comenzar por analisar la complejidad de las mas pequeñas.
En el caso de la clase Ronda, la complejidad de los metodos es la misma que los de ArrayList, pues es una extension. 
Para los definididos por nosotros, se puede observar que la complejidad de la funcion distancia(int a, int b) es O(1), pues solo realiza comparaciones de enteros, operaciones aritmeticas basicas y asignaciones.
El metodo  int  sumaDistancias(HashSet<Amistad> amistad) recorre la lista subyacente por cada elemento en ella. Es decir:
sum(i= 0 to n)O(i)O(a) =  sum(i= 0 to n)O(i*a) = O(sum(i= 0 to n)O(i)O(a)) = O(n^2*a) . Notar que en cada iteraciones del ciclo interior se llama a la funcion contains() del HashSet de Java. Como la misma esta implementada sobre una tabla de Hash, aunque , en promedio, la operacion sea O(1), el peor caso es O(a). La funcion contains() utiliza el metodo hashcode y equals de la clase amistad para poder determinar si el elemento en cuestion esta en el conjunto. Ambas,se puede ver, son O(1).


Determinemos ahora, la complejidad de SentarExploradoras.
Primero, notemos que se utilizan algunos metodos propios de la clase ArrayList(y Ronda). A saber, los mismos son: size(),add(),remove() y get(). Segun la documentacion de Java:
"The size, isEmpty, get, set, iterator, and listIterator operations run in constant time. The add operation runs in amortized constant time, that is, adding n elements requires O(n) time. All of the other operations run in linear time (roughly speaking)." Para el analisis, se tendra en cuenta el peor caso de add()(O(n)).

Centrandonos en el algoritmo, veamos cuantas "pasos" toma realizarlo.  Dada una lista de exploradoras e y un conjunto de amistades a, el algoritmo trabaja con e-1 elementos. A partir de esto, podemos pensar el algoritmo de backtracking como un arbol de decision, donde luego de colocar el primer nodo raiz, elegimos entre e-1 posibilidades(hijos),por cada uno de ellos, restan (e-2) elecciones, y asi siguiendo. De esta forma, la cantidad de hojas del arbol es (e-1)!. Cada hoja representa la cantidad de posibles rondas que se armaron. Sin embargo, esta no es la cantidad de pasos que realiza el algoritmo. Todavia falta agregarle los nodos internos, que fueron pasos previos para obtener las soluciones. Luego, la cantida de nodos en un arbol completo  exactamente e-ario es N = sum(i=0 to h)e ^i = e^(h+1) -1 / e-1 . Si t es la cantidad de hojas en el arbol, e^h = t, por lo tanto N = e*t -1/ (e-1). Como nuestro arbol esta "acotado" por un arbol exactamente e-ario, diremos que
N = cantidad de pasos = O(e*t -1/ e-1) = O(e*(e-1)! -1/e-1) = O(e! -1/e-1) = O(e!). Luego, falta ver cual es el "peso" de estos pasos. 
En cada iteracion del ciclo se hacen:
add() y remove() sobre la lista, que es O(2e) = O(e)
add() y remove() sobre la ronda, que es O(2e) = O(e)
Se pregunta si hay que hacer la PODA1 , O(1) pues size() lo es.
Se pregunta si hay que hacer la PODA2, llamando a sumaDistancia de la RondaAux y sumaDistancia de la RondaOptima, ambas con el conjunto a. Luego, esto es, por lo visto, O(2*e^2*a) = O(e^2*a)

Finalmente la cota de complejidad, teorica, resulta O(e!*e^2*a). Veamos que esto es O(e^e*a^2)
Probamos por induccion que e!*e^2*a < c*(e^e)*a para todo e >=1 , c = 4 y un a fijo
Si e = 1, e!*e*a = a < 4*(e^e)=4*a 
Si e > 1, (e+1)!(e+1)^2*a = e!(e+1)^2(e+1)*a = (e!(e^2) + 2e*(e!) + e!)*(e+1)*a < 3*e!(e^2)*(e+1)*(a)<(por hi)3*e^e*(e+1)*(a) = (*e^(e+1) + 3*e^e)*a < 4*(e+1)^(e+1)*a.



Mejor
---------------------
N:1Promedio:2.0000000949949027E-5| Max:0.0010000000474974513| Desvio:1.400000066496431E-4| PromedioRefinado:0.0|Desvio2:0.0
---------------------
---------------------
N:2Promedio:2.0000000949949027E-5| Max:0.0010000000474974513| Desvio:1.4000000664964312E-4| PromedioRefinado:0.0|Desvio2:0.0
---------------------
---------------------
N:3Promedio:9.000000427477062E-5| Max:0.0010000000474974513| Desvio:2.861817740179882E-4| PromedioRefinado:0.0|Desvio2:0.0
---------------------
---------------------
N:4Promedio:8.000000379979611E-5| Max:0.0010000000474974513| Desvio:2.7129321221074657E-4| PromedioRefinado:0.0|Desvio2:0.0
---------------------
---------------------
N:5Promedio:1.800000004004687E-4| Max:0.008999999612569809| Desvio:9.314504488527237E-4| PromedioRefinado:9.090909522704102E-5|Desvio2:2.874798009425916E-4
---------------------
---------------------
N:6Promedio:3.6000001477077604E-4| Max:0.006000000052154064| Desvio:7.282856748021346E-4| PromedioRefinado:3.030303174234701E-4|Desvio2:4.5956823055871555E-4
---------------------
---------------------
N:7Promedio:0.0012800000538118184| Max:0.006000000052154064| Desvio:7.756287805265706E-4| PromedioRefinado:0.0011458333877574962|Desvio2:3.52939065640735E-4
---------------------
---------------------
N:8Promedio:0.0053300000168383125| Max:0.008999999612569809| Desvio:0.001131856938247777| PromedioRefinado:0.005151515064591711|Desvio2:3.5855034865579755E-4
---------------------
---------------------
N:9Promedio:0.04917000036686659| Max:0.08100000023841858| Desvio:0.011529141280067486| PromedioRefinado:0.04363750037737191|Desvio2:0.003095334107341118
---------------------
---------------------
N:10Promedio:0.4942099979519844| Max:0.734000027179718| Desvio:0.09364382471128842| PromedioRefinado:0.45217499770224096|Desvio2:0.04188817503625849
---------------------
---------------------
N:11Promedio:5.586519989967346| Max:7.946000099182129| Desvio:0.8553785078168098| PromedioRefinado:5.3394225013088175|Desvio2:0.49324819927908214
---------------------


---------------------
N:1Promedio:2.0000000949949027E-5| Max:0.0010000000474974513| Desvio:1.400000066496431E-4| PromedioRefinado:0.0|Desvio2:0.0
---------------------
---------------------
N:2Promedio:2.0000000949949027E-5| Max:0.0010000000474974513| Desvio:1.4000000664964312E-4| PromedioRefinado:0.0|Desvio2:0.0
---------------------
---------------------
N:3Promedio:7.000000332482159E-5| Max:0.0010000000474974513| Desvio:2.551470285622942E-4| PromedioRefinado:0.0|Desvio2:0.0
---------------------
---------------------
N:4Promedio:2.1000000997446478E-4| Max:0.0010000000474974513| Desvio:4.0730825643442946E-4| PromedioRefinado:0.0|Desvio2:0.0
---------------------
---------------------
N:5Promedio:7.000000332482159E-5| Max:0.0010000000474974513| Desvio:2.5514702856229424E-4| PromedioRefinado:0.0|Desvio2:0.0
---------------------
---------------------
N:6Promedio:2.9000001377426087E-4| Max:0.004000000189989805| Desvio:5.708765461628628E-4| PromedioRefinado:0.0|Desvio2:0.0
---------------------
---------------------
N:7Promedio:7.80000037048012E-4| Max:0.004000000189989805| Desvio:5.758472293067933E-4| PromedioRefinado:0.0010000000474974513|Desvio2:0.0
---------------------
---------------------
N:8Promedio:0.004300000132061541| Max:0.007000000216066837| Desvio:6.08276175893772E-4| PromedioRefinado:0.004000000189989805|Desvio2:0.0
---------------------
---------------------
N:9Promedio:0.03926999978721142| Max:0.05000000074505806| Desvio:0.0028349783293273576| PromedioRefinado:0.03894736833478275|Desvio2:0.0014858521358030873
---------------------
---------------------
N:10Promedio:0.38635999977588653| Max:0.5460000038146973| Desvio:0.02676584519392584| PromedioRefinado:0.38045652145924774|Desvio2:0.013077040744463213
---------------------
---------------------
N:11Promedio:5.859469962120056| Max:8.215999603271484| Desvio:0.9303470600825912| PromedioRefinado:5.733624957501888|Desvio2:0.5409188140217651
---------------------
---------------------
N:12Promedio:60.74079006195068| Max:75.26499938964844| Desvio:7.303684911014639| PromedioRefinado:62.82720697337184|Desvio2:3.1336939343863794
---------------------
>